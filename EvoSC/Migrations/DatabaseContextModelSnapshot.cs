// <auto-generated />
using System;
using EvoSC.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvoSC.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EvoSC.Domain.Maps.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<int>("ManiaExchangeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ManiaExchangeVersion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Player_MapFavorites");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapKarma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<bool>("New")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Map_Karma");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Checkpoints")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Map_Records");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapStatistic", b =>
                {
                    b.Property<int>("MapStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountSkipped")
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPlays")
                        .HasColumnType("int");

                    b.HasKey("MapStatisticId");

                    b.HasIndex("MapId")
                        .IsUnique();

                    b.ToTable("Map_Statistics");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.PersonalBest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Checkpoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Player_PersonalBests");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Login")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("UbisoftName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.PlayerStatistic", b =>
                {
                    b.Property<int>("PlayerStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckpointsDriven")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveDaysPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Donations")
                        .HasColumnType("int");

                    b.Property<int>("Finishes")
                        .HasColumnType("int");

                    b.Property<int>("LocalRecords")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SpectatorTime")
                        .HasColumnType("int");

                    b.Property<int>("Visits")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatisticId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Player_Statistics");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.Map", b =>
                {
                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapFavorite", b =>
                {
                    b.HasOne("EvoSC.Domain.Maps.Map", "Map")
                        .WithMany("FavoritedMaps")
                        .HasForeignKey("MapId");

                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapKarma", b =>
                {
                    b.HasOne("EvoSC.Domain.Maps.Map", "Map")
                        .WithMany("MapKarmas")
                        .HasForeignKey("MapId");

                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithMany("MapKarmas")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapRecord", b =>
                {
                    b.HasOne("EvoSC.Domain.Maps.Map", "Map")
                        .WithMany("MapRecords")
                        .HasForeignKey("MapId");

                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithMany("MapRecords")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.MapStatistic", b =>
                {
                    b.HasOne("EvoSC.Domain.Maps.Map", "Map")
                        .WithOne("MapStatistic")
                        .HasForeignKey("EvoSC.Domain.Maps.MapStatistic", "MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.PersonalBest", b =>
                {
                    b.HasOne("EvoSC.Domain.Maps.Map", "Map")
                        .WithMany("PersonalBests")
                        .HasForeignKey("MapId");

                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithMany("PersonalBests")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.PlayerStatistic", b =>
                {
                    b.HasOne("EvoSC.Domain.Players.Player", "Player")
                        .WithOne("PlayerStatistic")
                        .HasForeignKey("EvoSC.Domain.Players.PlayerStatistic", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("EvoSC.Domain.Maps.Map", b =>
                {
                    b.Navigation("FavoritedMaps");

                    b.Navigation("MapKarmas");

                    b.Navigation("MapRecords");

                    b.Navigation("MapStatistic");

                    b.Navigation("PersonalBests");
                });

            modelBuilder.Entity("EvoSC.Domain.Players.Player", b =>
                {
                    b.Navigation("MapKarmas");

                    b.Navigation("MapRecords");

                    b.Navigation("PersonalBests");

                    b.Navigation("PlayerStatistic");
                });
#pragma warning restore 612, 618
        }
    }
}
